package main.graphics;

import java.awt.AlphaComposite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class SpriteSheet {
	
	BufferedImage spritesheet;
	String filepath;
	
	public SpriteSheet(String fPath){
		filepath = fPath;
		spritesheet = null;
		
		try {
		    spritesheet = ImageIO.read(new File(filepath));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	public BufferedImage getSprite(int x, int y, int w, int h, int sw, int sh){
		BufferedImage sprite;
		sprite = spritesheet.getSubimage(x, y, w, h);
		sprite.flush();
		BufferedImage scaledSprite = scaleImage(sprite, sw, sh);
		return scaledSprite;
	}
	
	public BufferedImage scaleImage(BufferedImage img, int width, int height) {
	    int imgWidth = img.getWidth();
	    int imgHeight = img.getHeight();
	    if (imgWidth*height < imgHeight*width) {
	        width = imgWidth*height/imgHeight;
	    } else {
	        height = imgHeight*width/imgWidth;
	    }
	    BufferedImage newImage = new BufferedImage(width, height,
	            BufferedImage.TYPE_INT_ARGB);
	    Graphics2D g = newImage.createGraphics();
	    try {
	        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
	                RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
	        
	        g.setComposite(AlphaComposite.Clear);
	        g.fillRect(0, 0, width, height);
	        
	        g.clearRect(0, 0, width, height);
	        g.setComposite(AlphaComposite.Src);
	        g.drawImage(img, 0, 0, width, height, null);
	    } finally {
	        g.dispose();
	    }
	    return newImage;
	}
	
	public void renderSpriteSheet(Graphics g, int x, int y){
		g.drawImage(spritesheet, x, y, null);
	}
}
